// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mpcwalletpb/api.proto

package mpcwalletpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MPCService_HealthCheck_FullMethodName               = "/mpcservice.MPCService/HealthCheck"
	MPCService_GetWallet_FullMethodName                 = "/mpcservice.MPCService/GetWallet"
	MPCService_GenerateKeyPair_FullMethodName           = "/mpcservice.MPCService/GenerateKeyPair"
	MPCService_GeneratePartialKey_FullMethodName        = "/mpcservice.MPCService/GeneratePartialKey"
	MPCService_ExchangePartialKey_FullMethodName        = "/mpcservice.MPCService/ExchangePartialKey"
	MPCService_ProvePartialKeyCommitment_FullMethodName = "/mpcservice.MPCService/ProvePartialKeyCommitment"
	MPCService_ExchangeKey_FullMethodName               = "/mpcservice.MPCService/ExchangeKey"
	MPCService_ProveKeyCommitment_FullMethodName        = "/mpcservice.MPCService/ProveKeyCommitment"
	MPCService_Sign_FullMethodName                      = "/mpcservice.MPCService/Sign"
	MPCService_SignASN1_FullMethodName                  = "/mpcservice.MPCService/SignASN1"
	MPCService_Verify_FullMethodName                    = "/mpcservice.MPCService/Verify"
	MPCService_VerifyASN1_FullMethodName                = "/mpcservice.MPCService/VerifyASN1"
	MPCService_GenerateSignatureR_FullMethodName        = "/mpcservice.MPCService/GenerateSignatureR"
	MPCService_GeneratePartialSignatureS_FullMethodName = "/mpcservice.MPCService/GeneratePartialSignatureS"
)

// MPCServiceClient is the client API for MPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MPCServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error)
	GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error)
	GeneratePartialKey(ctx context.Context, in *GeneratePartialKeyRequest, opts ...grpc.CallOption) (*GeneratePartialKeyResponse, error)
	ExchangePartialKey(ctx context.Context, in *ExchangePartialKeyRequest, opts ...grpc.CallOption) (*ExchangePartialKeyResponse, error)
	ProvePartialKeyCommitment(ctx context.Context, in *ProvePartialKeyCommitmentRequest, opts ...grpc.CallOption) (*ProvePartialKeyCommitmentResponse, error)
	ExchangeKey(ctx context.Context, in *ExchangeKeyRequest, opts ...grpc.CallOption) (*ExchangeKeyResponse, error)
	ProveKeyCommitment(ctx context.Context, in *ProveKeyCommitmentRequest, opts ...grpc.CallOption) (*ProveKeyCommitmentResponse, error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	SignASN1(ctx context.Context, in *SignASN1Request, opts ...grpc.CallOption) (*SignASN1Response, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	VerifyASN1(ctx context.Context, in *VerifyASN1Request, opts ...grpc.CallOption) (*VerifyASN1Response, error)
	GenerateSignatureR(ctx context.Context, in *GenerateSignatureRRequest, opts ...grpc.CallOption) (*GenerateSignatureRResponse, error)
	GeneratePartialSignatureS(ctx context.Context, in *GeneratePartialSignatureSRequest, opts ...grpc.CallOption) (*GeneratePartialSignatureSResponse, error)
}

type mPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMPCServiceClient(cc grpc.ClientConnInterface) MPCServiceClient {
	return &mPCServiceClient{cc}
}

func (c *mPCServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, MPCService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error) {
	out := new(GetWalletResponse)
	err := c.cc.Invoke(ctx, MPCService_GetWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error) {
	out := new(GenerateKeyPairResponse)
	err := c.cc.Invoke(ctx, MPCService_GenerateKeyPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) GeneratePartialKey(ctx context.Context, in *GeneratePartialKeyRequest, opts ...grpc.CallOption) (*GeneratePartialKeyResponse, error) {
	out := new(GeneratePartialKeyResponse)
	err := c.cc.Invoke(ctx, MPCService_GeneratePartialKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) ExchangePartialKey(ctx context.Context, in *ExchangePartialKeyRequest, opts ...grpc.CallOption) (*ExchangePartialKeyResponse, error) {
	out := new(ExchangePartialKeyResponse)
	err := c.cc.Invoke(ctx, MPCService_ExchangePartialKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) ProvePartialKeyCommitment(ctx context.Context, in *ProvePartialKeyCommitmentRequest, opts ...grpc.CallOption) (*ProvePartialKeyCommitmentResponse, error) {
	out := new(ProvePartialKeyCommitmentResponse)
	err := c.cc.Invoke(ctx, MPCService_ProvePartialKeyCommitment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) ExchangeKey(ctx context.Context, in *ExchangeKeyRequest, opts ...grpc.CallOption) (*ExchangeKeyResponse, error) {
	out := new(ExchangeKeyResponse)
	err := c.cc.Invoke(ctx, MPCService_ExchangeKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) ProveKeyCommitment(ctx context.Context, in *ProveKeyCommitmentRequest, opts ...grpc.CallOption) (*ProveKeyCommitmentResponse, error) {
	out := new(ProveKeyCommitmentResponse)
	err := c.cc.Invoke(ctx, MPCService_ProveKeyCommitment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, MPCService_Sign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) SignASN1(ctx context.Context, in *SignASN1Request, opts ...grpc.CallOption) (*SignASN1Response, error) {
	out := new(SignASN1Response)
	err := c.cc.Invoke(ctx, MPCService_SignASN1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, MPCService_Verify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) VerifyASN1(ctx context.Context, in *VerifyASN1Request, opts ...grpc.CallOption) (*VerifyASN1Response, error) {
	out := new(VerifyASN1Response)
	err := c.cc.Invoke(ctx, MPCService_VerifyASN1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) GenerateSignatureR(ctx context.Context, in *GenerateSignatureRRequest, opts ...grpc.CallOption) (*GenerateSignatureRResponse, error) {
	out := new(GenerateSignatureRResponse)
	err := c.cc.Invoke(ctx, MPCService_GenerateSignatureR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) GeneratePartialSignatureS(ctx context.Context, in *GeneratePartialSignatureSRequest, opts ...grpc.CallOption) (*GeneratePartialSignatureSResponse, error) {
	out := new(GeneratePartialSignatureSResponse)
	err := c.cc.Invoke(ctx, MPCService_GeneratePartialSignatureS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MPCServiceServer is the server API for MPCService service.
// All implementations must embed UnimplementedMPCServiceServer
// for forward compatibility
type MPCServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetWallet(context.Context, *GetWalletRequest) (*GetWalletResponse, error)
	GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error)
	GeneratePartialKey(context.Context, *GeneratePartialKeyRequest) (*GeneratePartialKeyResponse, error)
	ExchangePartialKey(context.Context, *ExchangePartialKeyRequest) (*ExchangePartialKeyResponse, error)
	ProvePartialKeyCommitment(context.Context, *ProvePartialKeyCommitmentRequest) (*ProvePartialKeyCommitmentResponse, error)
	ExchangeKey(context.Context, *ExchangeKeyRequest) (*ExchangeKeyResponse, error)
	ProveKeyCommitment(context.Context, *ProveKeyCommitmentRequest) (*ProveKeyCommitmentResponse, error)
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	SignASN1(context.Context, *SignASN1Request) (*SignASN1Response, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	VerifyASN1(context.Context, *VerifyASN1Request) (*VerifyASN1Response, error)
	GenerateSignatureR(context.Context, *GenerateSignatureRRequest) (*GenerateSignatureRResponse, error)
	GeneratePartialSignatureS(context.Context, *GeneratePartialSignatureSRequest) (*GeneratePartialSignatureSResponse, error)
	mustEmbedUnimplementedMPCServiceServer()
}

// UnimplementedMPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMPCServiceServer struct {
}

func (UnimplementedMPCServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMPCServiceServer) GetWallet(context.Context, *GetWalletRequest) (*GetWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedMPCServiceServer) GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeyPair not implemented")
}
func (UnimplementedMPCServiceServer) GeneratePartialKey(context.Context, *GeneratePartialKeyRequest) (*GeneratePartialKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePartialKey not implemented")
}
func (UnimplementedMPCServiceServer) ExchangePartialKey(context.Context, *ExchangePartialKeyRequest) (*ExchangePartialKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePartialKey not implemented")
}
func (UnimplementedMPCServiceServer) ProvePartialKeyCommitment(context.Context, *ProvePartialKeyCommitmentRequest) (*ProvePartialKeyCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvePartialKeyCommitment not implemented")
}
func (UnimplementedMPCServiceServer) ExchangeKey(context.Context, *ExchangeKeyRequest) (*ExchangeKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeKey not implemented")
}
func (UnimplementedMPCServiceServer) ProveKeyCommitment(context.Context, *ProveKeyCommitmentRequest) (*ProveKeyCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProveKeyCommitment not implemented")
}
func (UnimplementedMPCServiceServer) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedMPCServiceServer) SignASN1(context.Context, *SignASN1Request) (*SignASN1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignASN1 not implemented")
}
func (UnimplementedMPCServiceServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedMPCServiceServer) VerifyASN1(context.Context, *VerifyASN1Request) (*VerifyASN1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyASN1 not implemented")
}
func (UnimplementedMPCServiceServer) GenerateSignatureR(context.Context, *GenerateSignatureRRequest) (*GenerateSignatureRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSignatureR not implemented")
}
func (UnimplementedMPCServiceServer) GeneratePartialSignatureS(context.Context, *GeneratePartialSignatureSRequest) (*GeneratePartialSignatureSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePartialSignatureS not implemented")
}
func (UnimplementedMPCServiceServer) mustEmbedUnimplementedMPCServiceServer() {}

// UnsafeMPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPCServiceServer will
// result in compilation errors.
type UnsafeMPCServiceServer interface {
	mustEmbedUnimplementedMPCServiceServer()
}

func RegisterMPCServiceServer(s grpc.ServiceRegistrar, srv MPCServiceServer) {
	s.RegisterService(&MPCService_ServiceDesc, srv)
}

func _MPCService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_GetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).GetWallet(ctx, req.(*GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_GenerateKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).GenerateKeyPair(ctx, req.(*GenerateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_GeneratePartialKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePartialKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).GeneratePartialKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_GeneratePartialKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).GeneratePartialKey(ctx, req.(*GeneratePartialKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_ExchangePartialKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangePartialKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).ExchangePartialKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_ExchangePartialKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).ExchangePartialKey(ctx, req.(*ExchangePartialKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_ProvePartialKeyCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvePartialKeyCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).ProvePartialKeyCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_ProvePartialKeyCommitment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).ProvePartialKeyCommitment(ctx, req.(*ProvePartialKeyCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_ExchangeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).ExchangeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_ExchangeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).ExchangeKey(ctx, req.(*ExchangeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_ProveKeyCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProveKeyCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).ProveKeyCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_ProveKeyCommitment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).ProveKeyCommitment(ctx, req.(*ProveKeyCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_SignASN1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignASN1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).SignASN1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_SignASN1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).SignASN1(ctx, req.(*SignASN1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_VerifyASN1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyASN1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).VerifyASN1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_VerifyASN1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).VerifyASN1(ctx, req.(*VerifyASN1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_GenerateSignatureR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSignatureRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).GenerateSignatureR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_GenerateSignatureR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).GenerateSignatureR(ctx, req.(*GenerateSignatureRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_GeneratePartialSignatureS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePartialSignatureSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).GeneratePartialSignatureS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_GeneratePartialSignatureS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).GeneratePartialSignatureS(ctx, req.(*GeneratePartialSignatureSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MPCService_ServiceDesc is the grpc.ServiceDesc for MPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpcservice.MPCService",
	HandlerType: (*MPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _MPCService_HealthCheck_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _MPCService_GetWallet_Handler,
		},
		{
			MethodName: "GenerateKeyPair",
			Handler:    _MPCService_GenerateKeyPair_Handler,
		},
		{
			MethodName: "GeneratePartialKey",
			Handler:    _MPCService_GeneratePartialKey_Handler,
		},
		{
			MethodName: "ExchangePartialKey",
			Handler:    _MPCService_ExchangePartialKey_Handler,
		},
		{
			MethodName: "ProvePartialKeyCommitment",
			Handler:    _MPCService_ProvePartialKeyCommitment_Handler,
		},
		{
			MethodName: "ExchangeKey",
			Handler:    _MPCService_ExchangeKey_Handler,
		},
		{
			MethodName: "ProveKeyCommitment",
			Handler:    _MPCService_ProveKeyCommitment_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _MPCService_Sign_Handler,
		},
		{
			MethodName: "SignASN1",
			Handler:    _MPCService_SignASN1_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _MPCService_Verify_Handler,
		},
		{
			MethodName: "VerifyASN1",
			Handler:    _MPCService_VerifyASN1_Handler,
		},
		{
			MethodName: "GenerateSignatureR",
			Handler:    _MPCService_GenerateSignatureR_Handler,
		},
		{
			MethodName: "GeneratePartialSignatureS",
			Handler:    _MPCService_GeneratePartialSignatureS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mpcwalletpb/api.proto",
}
